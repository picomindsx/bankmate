import { leads, staff } from "@/lib/consts";
import { Lead, User } from "@/types/common";

export const addLead = (leadData: Partial<Lead>): boolean => {
  const newLead: Lead = {
    id: `lead-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    clientName: leadData.clientName || "",
    contactNumber: leadData.contactNumber || "",
    email: leadData.email || "",
    leadType: leadData.leadType || "", // Loan type for categorization
    leadSource: leadData.leadSource || "manual",
    branchId: leadData.branchId || "default",
    address: leadData.address || "",
    annualIncome: leadData.annualIncome || "",
    loanAmount: leadData.loanAmount || "",
    purpose: leadData.purpose || "",
    notes: leadData.notes || "",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    createdBy: leadData.createdBy || "system",
    createdByStaff: leadData.createdByStaff || false, // Track if created by staff
    assignmentStatus: leadData.assignmentStatus || "pending_assignment",
    isVisibleToStaff: leadData.isVisibleToStaff || false, // Staff-created leads need assignment first
    applicationStatus: "pending",
    fileStatus: "pending",
    assignedStaff: "",
    ownerManagerAssignment: "",
    selectedBank: "",
    documents: [],
    timeline: [
      {
        date: new Date().toISOString(),
        status: "Lead Created",
        description: leadData.createdByStaff
          ? `Lead generated by staff: ${leadData.createdBy}`
          : "Lead created in system",
        updatedBy: leadData.createdBy || "system",
      },
    ],
  };

  leads.push(newLead);
  console.log(
    `[v0] Lead created: ${newLead.id} by ${leadData.createdBy} (Staff: ${leadData.createdByStaff})`
  );
  return true;
};

export const assignLeadToStaff = (
  leadId: string,
  staffId: string,
  assignedBy: User,
  selectedBank?: string
): boolean => {
  // Only Owner, Manager, and Branch Head can assign leads
  if (!["owner", "manager", "branch_head"].includes(assignedBy.role)) {
    return false;
  }

  const lead = leads.find((l) => l.id === leadId);
  const staffMember = staff.find((s) => s.id === staffId && s.isActive);

  if (lead && staffMember) {
    lead.assignedStaff = staffMember.name;
    lead.ownerManagerAssignment = `${assignedBy.name} (${assignedBy.role})`;
    lead.isVisibleToStaff = true; // Make lead visible to staff after assignment
    lead.assignmentStatus = "assigned";
    lead.assignedAt = new Date().toISOString();

    if (selectedBank) {
      lead.selectedBank = selectedBank;
      lead.bankAssignedAt = new Date().toISOString();
    }

    lead.updatedAt = new Date().toISOString();

    // Add timeline entry
    lead.timeline.push({
      date: new Date().toISOString(),
      status: "Lead Assigned",
      description: `Assigned to ${staffMember.name} by ${assignedBy.name}${
        selectedBank ? ` with ${selectedBank}` : ""
      }`,
      updatedBy: assignedBy.name,
    });

    console.log(
      `[v0] Lead ${leadId} assigned to ${staffMember.name} by ${assignedBy.name}`
    );
    return true;
  }
  return false;
};

export const getAssignedLeads = (staffId: string): Lead[] => {
  const staffMember = staff.find((s) => s.id === staffId);
  if (!staffMember) return [];

  // Staff can see:
  // 1. Leads they personally created (even if not assigned back to them yet)
  // 2. Leads assigned to them by Owner/Manager/Branch Head
  // 3. Leads assigned from external sources
  return leads.filter(
    (lead) =>
      (lead.createdBy === staffMember.name && lead.createdByStaff === true) || // Their own created leads
      (lead.assignedStaff === staffMember.name &&
        lead.isVisibleToStaff === true &&
        lead.assignmentStatus === "assigned") // Assigned leads
  );
};

export const getStaffCreatedLeads = (): Lead[] => {
  return leads.filter((lead) => lead.createdByStaff === true);
};

export const getLeadsByLoanType = (
  loanType: string,
  branchId?: string
): Lead[] => {
  const filteredLeads = branchId
    ? leads.filter((lead) => lead.branchId === branchId)
    : leads;
  return filteredLeads.filter((lead) => lead.leadType === loanType);
};

export const getLeads = (branchId?: string): Lead[] => {
  if (branchId) {
    return leads.filter((l) => l.branchId === branchId);
  }
  return leads;
};

export const updateLead = (
  leadId: string,
  updates: Partial<Lead>,
  editedBy?: string
): boolean => {
  const leadIndex = leads.findIndex((l) => l.id === leadId);
  if (leadIndex !== -1) {
    const currentLead = leads[leadIndex];
    const changes: string[] = [];
    const previousValues: Record<string, any> = {};

    // Track what fields are being changed
    Object.keys(updates).forEach((key) => {
      if (
        key !== "updatedAt" &&
        key !== "editHistory" &&
        currentLead[key] !== updates[key]
      ) {
        changes.push(key);
        previousValues[key] = currentLead[key];
      }
    });

    // Add edit history if there are actual changes and editedBy is provided
    if (changes.length > 0 && editedBy) {
      const editHistory = currentLead.editHistory || [];
      editHistory.push({
        editedBy,
        editedAt: new Date().toISOString(),
        changes,
        previousValues,
      });
      updates.editHistory = editHistory;
    }

    leads[leadIndex] = {
      ...currentLead,
      ...updates,
      updatedAt: new Date().toISOString(),
    };
    return true;
  }
  return false;
};

export const deleteLead = (leadId: string): boolean => {
  const leadIndex = leads.findIndex((l) => l.id === leadId);
  if (leadIndex !== -1) {
    leads.splice(leadIndex, 1);
    return true;
  }
  return false;
};
